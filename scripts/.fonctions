#!/bin/bash 

EXIT_PROPERLY () {      # Provoque l'arrêt du script en cas d'erreur. Et nettoye les résidus.
        exit_code=$?
        if [ "$exit_code" -eq 0 ]; then
                        exit 0  # Quitte sans erreur si le script se termine correctement.
        fi
        trap '' EXIT
        set +eu
        echo -e "\e[91m \e[1m"  # Shell in light red bold
        echo -e "!!\n  $app install's script has encountered an error. Installation was cancelled.\n!!" >&2

        if type -t CLEAN_SETUP > /dev/null; then        # Vérifie l'existance de la fonction avant de l'exécuter.
                CLEAN_SETUP     # Appel la fonction de nettoyage spécifique du script install.
        fi

        # Compense le bug de ssowat qui ne supprime pas l'entrée de l'app en cas d'erreur d'installation.
        sudo sed -i "\@\"$domain$path/\":@d" /etc/ssowat/conf.json

        ynh_die
}

TRAP_ON () {    # Activate signal capture
        set -eu # Exit if a command fail, and if a variable is used unset.
        trap EXIT_PROPERLY EXIT # Capturing exit signals on shell script
}

# We check variables are not empty
CHECK_VAR () {  # Vérifie que la variable n'est pas vide.
# $1 = Variable à vérifier
# $2 = Texte à afficher en cas d'erreur
        test -n "$1" || (echo "$2" >&2 && false)
}

# Check the path value and correct it (adds / at begining and removes it at the end)
CHECK_PATH () { # Vérifie la présence du / en début de path. Et son absence à la fin.
        if [ "${path:0:1}" != "/" ]; then    # Si le premier caractère n'est pas un /
                path="/$path"    # Ajoute un / en début de path
        fi
        if [ "${path:${#path}-1}" == "/" ] && [ ${#path} -gt 1 ]; then    # Si le dernier caractère est un / et que ce n'est pas l$
                path="${path:0:${#path}-1}"     # Supprime le dernier caractère
        fi
}

# Check domain and path availibility
CHECK_DOMAINPATH () {   # Vérifie la disponibilité du path et du domaine.
        ynh_webpath_available $domain $path
        ynh_webpath_register $app $domain $path
}

# Check destination folder is not used already
CHECK_FINALPATH () {    # Vérifie que le dossier de destination n'est pas déjà utilisé.
        final_path=/var/www/$app
        if [ -e "$final_path" ]
        then
                echo "This path already contains a folder" >&2
                false
        fi
}

# We check that calibre path is correct
CHECK_CALIBRE () {  # Vérifie la présence du / en début de path. Et son absence à la fin.
        if [ "${calibre:0:1}" != "/" ]; then    # Si le premier caractère n'est pas un /
                calibre="/$calibre"    # Ajoute un / en début de path
        fi
        if [ "${calibre:${#calibre}-1}" == "/" ] && [ ${#calibre} -gt 1 ]; then    # Si le dernier caractère est un / $
                calibre="${calibre:0:${#calibre}-1}"        # Supprime le dernier caractère
        fi
}

SECURE_REMOVE () {      # Suppression de dossier avec vérification des variables
	chaine="$1"	# L'argument doit être donné entre quotes simple '', pour éviter d'interpréter les variables.
	no_var=0
	while (echo "$chaine" | grep -q '\$')	# Boucle tant qu'il y a des $ dans la chaine
	do
		no_var=1
		global_var=$(echo "$chaine" | cut -d '$' -f 2)	# Isole la première variable trouvée.
		only_var=\$$(expr "$global_var" : '\([A-Za-z0-9_]*\)')	# Isole complètement la variable en ajoutant le $ au début et en gardant uniquement le nom de la variable. Se débarrasse surtout du / et d'un éventuel chemin derrière.
		real_var=$(eval "echo ${only_var}")		# `eval "echo ${var}` permet d'interpréter une variable contenue dans une variable.
		if test -z "$real_var" || [ "$real_var" = "/" ]; then
			echo "Variable $only_var is empty, suppression of $chaine cancelled." >&2
			return 1
		fi
		chaine=$(echo "$chaine" | sed "s@$only_var@$real_var@")	# remplace la variable par sa valeur dans la chaine.
	done
	if [ "$no_var" -eq 1 ]
	then
		if [ -e "$chaine" ]; then
			echo "Delete directory $chaine"
			sudo rm -r "$chaine"
		fi
		return 0
	else
		echo "No detected variable." >&2
		return 1
	fi
}

